<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Depot Notes ‚Äì Graphical Picker + Pricebook</title>
<style>
:root{
  --bg:#0b0d10; --panel:#12161b; --ink:#e9eef5; --muted:#9fb0c2; --accent:#4aa3ff;
  --ok:#3ecf8e; --warn:#ffc247; --bad:#ff6b6b; --line:#202733; --chip:#1a2028;
}
*{box-sizing:border-box} html,body{height:100%}
body{margin:0;background:var(--bg);color:var(--ink);font:15px/1.45 ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial}
button{cursor:pointer;border:0;border-radius:10px;padding:10px 12px;background:#1a2028;color:var(--ink)}
button:hover{background:#202734}
.iconbtn{display:inline-flex;align-items:center;gap:8px}
small,.small{font-size:12px;color:var(--muted)}
kbd{background:#0e1116;border:1px solid var(--line);padding:2px 6px;border-radius:6px;color:var(--muted)}
header{display:flex;align-items:center;justify-content:space-between;padding:14px 16px;border-bottom:1px solid var(--line);background:linear-gradient(0deg,#0e1116,#0b0d10)}
header h1{margin:0;font-size:18px;letter-spacing:.2px}
header .right{display:flex;align-items:center;gap:8px}
.badge{display:inline-flex;gap:6px;align-items:center;border:1px solid var(--line);padding:6px 8px;border-radius:8px;background:var(--chip);color:var(--muted);font-size:12px}

main{display:grid;grid-template-columns:300px 1fr 380px;gap:12px;padding:12px;min-height:calc(100vh - 58px)}
aside,section{background:var(--panel);border:1px solid var(--line);border-radius:14px;min-height:520px}
h2,h3{margin:0 0 10px}
hr{border:0;border-top:1px solid var(--line);margin:12px 0}

/* Left: sections */
#sections{padding:12px}
#sections .search{display:flex;gap:8px;margin-bottom:10px}
.search input[type="search"], .input, select{
  background:#0e1116;border:1px solid var(--line);border-radius:10px;padding:10px;color:var(--ink);width:100%;
}
#sectionList{display:flex;flex-direction:column;gap:6px;max-height:calc(100vh - 230px);overflow:auto}
.section-chip{display:flex;justify-content:space-between;align-items:center;background:var(--chip);border:1px solid var(--line);padding:10px;border-radius:10px}
.section-chip.active{outline:2px solid var(--accent)}
.section-chip .count{font-size:12px;color:var(--muted)}

/* Center: cards */
#center{padding:14px;display:flex;flex-direction:column}
#toolbar{display:flex;align-items:center;gap:8px;margin-bottom:8px;flex-wrap:wrap}
#chips{display:flex;gap:6px;flex-wrap:wrap}
.pill{font-size:12px;padding:4px 8px;background:#10161e;border:1px solid var(--line);border-radius:999px;color:var(--muted);cursor:pointer}
.grid{display:grid;grid-template-columns:repeat(2,1fr);gap:8px;align-content:start;overflow:auto;min-height:300px}
.card{border:1px solid var(--line);background:#0e1116;border-radius:12px;padding:10px;display:flex;gap:10px;align-items:flex-start}
.card label{display:flex;gap:10px;align-items:flex-start;cursor:pointer}
.card code{color:#b7c7ff;font-size:12px;background:#0b0e12;padding:2px 6px;border-radius:6px;border:1px solid #1e2633}
.card .sub{font-size:12px;color:var(--muted)}
.card input[type="checkbox"]{margin-top:3px;min-width:18px;min-height:18px}
.freepad{width:100%;min-height:78px;background:#0e1116;border:1px solid var(--line);border-radius:10px;padding:8px;color:var(--ink);resize:vertical}

/* Right: copy tabs + final */
#right{padding:12px;display:flex;flex-direction:column;gap:10px}
#copyBox{width:100%;min-height:140px;background:#0e1116;border:1px solid var(--line);border-radius:10px;padding:8px;color:var(--ink);resize:vertical;font-family:ui-monospace,Consolas,Menlo,monospace}
#finalbox{width:100%;min-height:140px;background:#0e1116;border:1px solid var(--line);border-radius:10px;padding:8px;color:var(--ink);resize:vertical;font-family:ui-monospace,Consolas,Menlo,monospace}

/* Footer controls */
footer#final{position:sticky;bottom:0;background:linear-gradient(0deg,#0b0d10 50%,transparent);padding:10px 12px}
footer#final .wrap{display:grid;grid-template-columns:1fr 320px;gap:10px}

/* ‚öôÔ∏è Drawer (hidden page) */
#gear{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;z-index:50}
#gear .panel{position:absolute;inset:auto 0 0 auto;width:min(980px,100%);height:min(100%,760px);right:0;background:var(--panel);border-left:1px solid var(--line);box-shadow:-10px 0 40px rgba(0,0,0,.4)}
#gear header{position:sticky;top:0;z-index:1}
#gear .body{display:grid;grid-template-columns:1fr 360px;gap:12px;padding:12px;height:calc(100% - 58px);overflow:auto}
table{width:100%;border-collapse:separate;border-spacing:0 6px}
td,th{font-size:13px;text-align:left;padding:8px}
tbody tr{background:#0e1116;border:1px solid var(--line)}
tbody tr td:first-child{border-top-left-radius:10px;border-bottom-left-radius:10px}
tbody tr td:last-child{border-top-right-radius:10px;border-bottom-right-radius:10px}
.t-right{text-align:right}
.qty{width:72px;text-align:center}

/* Scrollbars */
*::-webkit-scrollbar{height:10px;width:10px}
*::-webkit-scrollbar-thumb{background:#233043;border-radius:10px}
*::-webkit-scrollbar-track{background:#0e1116}
</style>
</head>
<body>
<header>
  <div class="left">
    <h1>Depot Notes ‚Äì Graphical Picker</h1>
    <span class="badge">Leaves <span id="leafCount">0</span></span>
  </div>
  <div class="right">
    <span class="badge">Selected <span id="selCount">0</span></span>
    <button id="openGear" class="iconbtn" title="Components & Pricebook (hidden page)"><span>‚öôÔ∏è</span><span>Components</span></button>
  </div>
</header>

<main>
  <!-- Left: Sections -->
  <aside id="left">
    <div id="sections">
      <div class="search">
        <input id="sectionSearch" type="search" placeholder="Filter sections‚Ä¶" />
        <button id="clearSel" title="Clear current section">Clear</button>
      </div>
      <div id="sectionList"></div>
      <hr/>
      <div class="small">Options source: <span id="sourceInfo">loading‚Ä¶</span></div>
    </div>
  </aside>

  <!-- Center: Cards -->
  <section id="center">
    <div id="toolbar">
      <span class="badge" id="activeSectionTag">No section</span>
      <div id="chips"></div>
      <span class="small">Tip: <kbd>‚åò/Ctrl</kbd> + <kbd>Enter</kbd> copies the current section.</span>
    </div>

    <div class="grid" id="cards"></div>

    <hr/>
    <textarea id="freepad" class="freepad" placeholder="‚ÜòÔ∏è Free-typed notes for this section (appended to output)."></textarea>

    <div style="margin-top:8px;display:flex;gap:8px;flex-wrap:wrap">
      <button id="btnCopySection" class="iconbtn">üìã Copy This Section</button>
      <button id="btnSelectAll" class="iconbtn">‚úÖ Select all (visible)</button>
      <button id="btnClear" class="iconbtn">üßπ Clear section</button>
    </div>
  </section>

  <!-- Right: Copy (per section tabs) + Final -->
  <aside id="right">
    <div style="display:flex;justify-content:space-between;align-items:center;gap:8px">
      <h3 style="margin:0">Depot Copy ‚Äì By Section</h3>
      <select id="copyTab" class="input" style="min-width:200px"></select>
    </div>
    <textarea id="copyBox" readonly></textarea>
    <div class="small" style="margin-top:-6px">Depot formatting:
      <label class="small"><input type="checkbox" id="includeHeaders" checked> Include header</label>
      <label class="small"><input type="checkbox" id="useSemicolons" checked> Use <code>;</code> breaks</label>
      <label class="small"><input type="checkbox" id="arrowPrefix"> Prefix ‚úÖ</label>
    </div>
    <div style="display:flex;gap:8px;flex-wrap:wrap;margin-top:6px">
      <button id="btnCopyTab" class="iconbtn">üìã Copy Selected Tab</button>
      <button id="btnAppendToFinal" class="iconbtn">‚û°Ô∏è Add Selected Tab to Final</button>
    </div>

    <hr/>

    <div class="copybox">
      <h3>Final Summary (customer clean)</h3>
      <textarea id="finalbox" placeholder="All sections you add will collect here."></textarea>
      <div style="display:flex;gap:8px;margin-top:6px">
        <button id="btnCopyFinal" class="iconbtn">üìã Copy Final</button>
        <button id="btnClearFinal" class="iconbtn">üßΩ Clear</button>
      </div>
    </div>
  </aside>
</main>

<footer id="final">
  <div class="wrap">
    <div class="small">Use ‚öôÔ∏è to build a components list from your pricebook and push it into the notes.</div>
    <div style="text-align:right;display:flex;gap:8px;justify-content:flex-end">
      <button id="saveState" class="iconbtn">üíæ Save session</button>
      <button id="loadState" class="iconbtn">üì• Load session</button>
      <button id="resetState" class="iconbtn">‚ôªÔ∏è Reset</button>
    </div>
  </div>
</footer>

<!-- ‚öôÔ∏è Hidden page: Components & Pricebook -->
<div id="gear" aria-hidden="true">
  <div class="panel">
    <header>
      <div class="left"><h1>‚öôÔ∏è Components & Pricebook</h1></div>
      <div class="right"><button id="closeGear" class="iconbtn">‚úñÔ∏è Close</button></div>
    </header>
    <div class="body">
      <section>
        <div style="display:flex;gap:8px;align-items:center;margin-bottom:8px">
          <input id="pbSearch" class="input" type="search" placeholder="Search components (name, code, category)" />
          <select id="pbCat" class="input" style="max-width:220px"></select>
          <button id="pbReload" class="iconbtn" title="Reload pricebook.json">üîÑ Reload</button>
        </div>
        <div class="small">Pricebook source: <span id="pbSource">loading‚Ä¶</span> ‚Ä¢ Items: <strong id="pbCount">0</strong></div>
        <table>
          <thead><tr><th>Code</th><th>Name</th><th>Category</th><th class="t-right">Unit</th><th>Qty</th><th></th></tr></thead>
          <tbody id="pbTable"></tbody>
        </table>
        <hr/>
        <details>
          <summary class="small">Paste/overwrite pricebook JSON (optional)</summary>
          <textarea id="pbJson" class="freepad" placeholder='[{"code":"P3001","name":"Stand-off kit","category":"Accessories","price":49.00}]'></textarea>
          <div style="display:flex;gap:8px;align-items:center">
            <button id="pbApply" class="iconbtn">‚ö†Ô∏è Replace In-Memory Pricebook</button>
            <span class="small">Updates local memory & localStorage (no file writes).</span>
          </div>
        </details>
      </section>
      <aside>
        <div style="border:1px solid var(--line);background:#0e1116;border-radius:12px;padding:10px;display:flex;flex-direction:column;gap:8px">
          <h3 style="margin:0">üß∫ Components List</h3>
          <div id="cartList" class="small"></div>
          <hr/>
          <div style="display:flex;gap:10px;flex-wrap:wrap">
            <label class="small"><input type="checkbox" id="showPrices" checked/> Show prices</label>
            <label class="small"><input type="checkbox" id="exVAT" /> Ex VAT totals</label>
          </div>
          <div style="display:flex;justify-content:space-between;font-weight:600"><span>Subtotal</span><span id="sumSub">¬£0.00</span></div>
          <div style="display:flex;justify-content:space-between;font-weight:600"><span>VAT (20%)</span><span id="sumVat">¬£0.00</span></div>
          <div style="display:flex;justify-content:space-between;font-weight:600"><span>Total</span><span id="sumTot">¬£0.00</span></div>
          <div style="display:flex;gap:8px;flex-wrap:wrap;margin-top:6px">
            <button id="cartToClipboard" class="iconbtn">üìã Copy lines</button>
            <button id="cartAsJSON" class="iconbtn">üßæ Copy JSON</button>
            <button id="cartToNotes" class="iconbtn">‚û°Ô∏è Send to ‚ÄúComponents‚Äù</button>
          </div>
        </div>
      </aside>
    </div>
  </div>
</div>

<script>
/* ============================== Utilities ============================== */
const $ = s => document.querySelector(s);
const $$ = s => Array.from(document.querySelectorAll(s));
const money = n => '¬£' + (Number(n||0).toFixed(2));
const esc = s => (s||'').replace(/[<>&]/g, m=>({ '<':'&lt;','>':'&gt;','&':'&amp;' }[m]));
const lc = {
  save:()=>localStorage.setItem('depot_state', JSON.stringify(state)),
  load:()=>{ try{ return JSON.parse(localStorage.getItem('depot_state')||'{}') }catch{ return {} } },
  savePB: d=>localStorage.setItem('depot_pricebook', JSON.stringify(d)),
  loadPB: ()=>{ try{ return JSON.parse(localStorage.getItem('depot_pricebook')||'[]') }catch{ return [] } }
};

/* ============================== Fallback data ============================== */
const SAMPLE_OPTIONS = `
# DEPOT NOTES OPTIONS ‚Äì KISS FLAT LEAVES
# CODE | Section | Line
[needs]
NE01 | Needs | Better water pressure
NE02 | Needs | Faster hot water delivery
NE03 | Needs | More usable space
NE04 | Needs | Lower running costs

[system_characteristics]
SC01 | System | Combi
SC02 | System | System (with cylinder)
SC03 | System | Heat-only (regular)
SC04 | Pressurisation | Sealed system
SC05 | Pressurisation | Open-vented

[components]
CMP01 | Components | New TRVs where required
CMP02 | Components | System filter to protect boiler
`.trim();

const SAMPLE_PRICEBOOK = [
  {"code":"P3001","name":"Stand-off kit (Ideal combi/system)","category":"Accessories","price":49.00},
  {"code":"P7736","name":"High-rise flue (Vaillant)","category":"Flues","price":189.00},
  {"code":"P9143","name":"High-rise flue (Worcester)","category":"Flues","price":205.00},
  {"code":"F001","name":"Magnetic system filter","category":"System Protection","price":120.00},
  {"code":"PF01","name":"Powerflush pack","category":"Cleaning","price":450.00}
];

/* ============================== Global state ============================== */
let state = {
  optionsText:'', leaves:[], sections:[], bySection:{},
  selection:{}, freepad:{}, active:'',
  includeHeaders:true, useSemicolons:true, arrowPrefix:false,
  pricebook:[], cart:{}
};

/* ============================== Options load/parse ============================== */
async function loadOptions(){
  let src = 'Options.txt', text = '';
  try{
    const r = await fetch('Options.txt',{cache:'no-store'});
    if(r.ok) text = await r.text();
  }catch{}
  if(!text || !/\[.+\]/.test(text)){ text = SAMPLE_OPTIONS; $('#sourceInfo').textContent = 'SAMPLE (in-page)'; }
  else $('#sourceInfo').textContent = src;
  state.optionsText = text;
  parseOptions(text);
}
function parseOptions(text){
  state.leaves = []; state.bySection = {}; state.sections = [];
  let current = '';
  text.split(/\r?\n/).forEach(line=>{
    line = line.trim();
    if(!line || line.startsWith('#')) return;
    const m = line.match(/^\[(.+)\]$/);
    if(m){ current = m[1].trim(); if(!state.bySection[current]) state.bySection[current]=[]; if(!state.sections.includes(current)) state.sections.push(current); return; }
    const p = line.split('|').map(s=>s.trim());
    if(p.length>=3){
      const [code, _, txt] = p;
      const sec = current;
      const leaf = {code, section:sec, text:txt};
      state.leaves.push(leaf);
      (state.bySection[sec] ||= []).push(leaf);
    }
  });
  $('#leafCount').textContent = state.leaves.length;
  drawSections();
  if(!state.active && state.sections.length) switchSection(state.sections[0]);
  refreshCopyTabs();
}

/* ============================== Pricebook loader (robust) ============================== */
async function loadPricebook(){
  let src='pricebook.json', arr=[];
  try{
    const r = await fetch('pricebook.json',{cache:'no-store'});
    if(r.ok){
      const txt = await r.text();
      try{
        const j = JSON.parse(txt);
        if(Array.isArray(j) && j.length) arr = j;
      }catch(e){ console.warn('pricebook.json parse error', e); }
    }
  }catch(e){ console.warn('pricebook.json fetch error', e); }
  const fromLS = lc.loadPB();
  if(!arr.length && Array.isArray(fromLS) && fromLS.length){ arr = fromLS; src='localStorage'; }
  if(!arr.length){ arr = SAMPLE_PRICEBOOK; src='SAMPLE (in-page)'; }
  state.pricebook = arr.map(x=>({code:String(x.code||''),name:String(x.name||''),category:String(x.category||'Misc'),price:Number(x.price||0)}));
  lc.savePB(state.pricebook);
  $('#pbSource').textContent = src;
  drawPBControls();
}

/* ============================== Left: sections list ============================== */
function drawSections(){
  const q = ($('#sectionSearch').value||'').toLowerCase();
  const host = $('#sectionList'); host.innerHTML='';
  state.sections
    .filter(s=>!q || s.toLowerCase().includes(q))
    .forEach(s=>{
      const div = document.createElement('div'); div.className='section-chip'+(s===state.active?' active':'');
      const count = (state.selection[s]?.size||0);
      div.innerHTML = `<div><strong>${esc(s)}</strong></div><div class="count">${count}</div>`;
      div.addEventListener('click',()=>switchSection(s));
      host.appendChild(div);
    });
}

/* ============================== Center: cards ============================== */
function switchSection(sec){
  state.active = sec;
  $('#activeSectionTag').textContent = `Section: ${sec}`;
  $('#freepad').value = state.freepad[sec] || '';
  drawCards(); drawChips(); drawSections(); refreshCopyTabs();
}
function drawCards(){
  const host = $('#cards'); host.innerHTML='';
  const items = state.bySection[state.active]||[];
  items.forEach(it=>{
    const checked = state.selection[state.active]?.has(it.code) ? 'checked' : '';
    const card = document.createElement('div'); card.className='card';
    card.innerHTML = `
      <label>
        <input type="checkbox" data-code="${esc(it.code)}" ${checked}/>
        <div>
          <div><strong>${esc(it.text)}</strong></div>
          <div class="sub"><code>${esc(it.code)}</code> ‚Ä¢ ${esc(it.section)}</div>
        </div>
      </label>`;
    card.querySelector('input').addEventListener('change', e=>{
      toggleSelection(state.active, it.code, e.target.checked);
    });
    host.appendChild(card);
  });
}
function toggleSelection(sec, code, on){
  (state.selection[sec] ||= new Set());
  on ? state.selection[sec].add(code) : state.selection[sec].delete(code);
  $('#selCount').textContent = totalSelected();
  drawChips(); drawSections(); refreshCopyTabs();
}
function drawChips(){
  const host = $('#chips'); host.innerHTML='';
  const set = state.selection[state.active]||new Set();
  set.forEach(code=>{
    const span = document.createElement('span'); span.className='pill'; span.textContent = code;
    span.title = 'Click to remove';
    span.addEventListener('click',()=>{ toggleSelection(state.active, code, false); drawCards(); });
    host.appendChild(span);
  });
}
function totalSelected(){
  return Object.values(state.selection).reduce((sum,set)=> sum + (set?.size||0), 0);
}

/* ============================== Copy mechanics ============================== */
function makeLinesForSection(sec){
  const items = state.bySection[sec]||[];
  const selected = new Set([...(state.selection[sec]||new Set())]);
  const chosen = items.filter(x=>selected.has(x.code));
  const prefix = $('#arrowPrefix').checked ? '‚úÖ ' : '';
  const lines = chosen.map(x=> `${prefix}${x.text}`);
  const pad = (state.freepad[sec]||'').trim();
  if(pad) pad.split(/\r?\n/).forEach(line=>{ if(line.trim()) lines.push(prefix+line.trim()); });
  return lines;
}
function formatForDepotSectionKey(secKey){
  const lines = makeLinesForSection(secKey);
  const semis = $('#useSemicolons').checked;
  let body = lines.join(semis?'; ':'\n');
  if($('#includeHeaders').checked && secKey) body = `${secKey}: ` + body;
  return body;
}
function refreshCopyTabs(){
  const sel = $('#copyTab');
  const keys = state.sections.slice();
  if(!keys.length){ sel.innerHTML=''; $('#copyBox').value=''; return; }
  const prev = sel.value;
  sel.innerHTML = keys.map(k=>`<option value="${esc(k)}">${esc(k)}</option>`).join('');
  sel.value = keys.includes(prev) ? prev : (state.active || keys[0]);
  $('#copyBox').value = formatForDepotSectionKey(sel.value);
}

/* ============================== Pricebook UI ============================== */
let pbFilter = {q:'',cat:''};
function drawPBControls(){
  const cats = Array.from(new Set(state.pricebook.map(x=>x.category||'Misc'))).sort();
  const catSel = $('#pbCat');
  catSel.innerHTML = '<option value="">All categories</option>' + cats.map(c=>`<option>${esc(c)}</option>`).join('');
  $('#pbCount').textContent = state.pricebook.length;
  drawPBTable();
}
function drawPBTable(){
  const q = pbFilter.q.toLowerCase();
  const cat = pbFilter.cat;
  const host = $('#pbTable'); host.innerHTML='';
  state.pricebook
    .filter(x=>!cat || x.category===cat)
    .filter(x=>!q || (x.name+x.code+x.category).toLowerCase().includes(q))
    .slice(0,600)
    .forEach(row=>{
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td><code>${esc(row.code)}</code></td>
        <td>${esc(row.name)}</td>
        <td>${esc(row.category)}</td>
        <td class="t-right">${money(row.price)}</td>
        <td><input class="qty input" type="number" min="1" step="1" value="1"/></td>
        <td class="t-right"><button class="iconbtn">‚ûï Add</button></td>`;
      tr.querySelector('button').addEventListener('click',()=>{
        const qty = Math.max(1, Number(tr.querySelector('.qty').value||1));
        addToCart(row, qty);
      });
      host.appendChild(tr);
    });
  drawCart();
}
function addToCart(item, qty){
  const c = (state.cart[item.code] ||= { ...item, qty:0 });
  c.qty += qty;
  drawCart();
}
function drawCart(){
  const list = $('#cartList'); list.innerHTML='';
  const arr = Object.values(state.cart).filter(x=>x.qty>0);
  if(!arr.length){ list.innerHTML = '<div class="small">No items yet.</div>'; }
  arr.forEach(it=>{
    const div = document.createElement('div');
    div.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center;gap:10px">
        <div><strong>${esc(it.name)}</strong><br/><span class="small"><code>${esc(it.code)}</code> ‚Ä¢ ${esc(it.category)}</span></div>
        <div style="display:flex;gap:6px;align-items:center">
          <input class="qty input" type="number" min="0" step="1" value="${it.qty}" style="width:76px"/>
          <div style="min-width:90px;text-align:right">${$('#showPrices').checked?money(it.price):''}</div>
          <button class="iconbtn">üóëÔ∏è</button>
        </div>
      </div>`;
    const qtyEl = div.querySelector('input');
    qtyEl.addEventListener('change',()=>{ it.qty = Math.max(0, Number(qtyEl.value||0)); drawCart(); });
    div.querySelector('button').addEventListener('click',()=>{ it.qty=0; drawCart(); });
    list.appendChild(div);
  });
  const sub = arr.reduce((s,x)=> s + x.qty * Number(x.price||0), 0);
  const ex = $('#exVAT').checked;
  const vat = ex ? 0 : sub * 0.2;
  const tot = ex ? sub : sub + vat;
  $('#sumSub').textContent = money(sub);
  $('#sumVat').textContent = money(vat);
  $('#sumTot').textContent = money(tot);
}
function cartAsLines(){
  const arr = Object.values(state.cart).filter(x=>x.qty>0);
  const showP = $('#showPrices').checked;
  const ex = $('#exVAT').checked;
  const lines = arr.map(x=>{
    const unit = showP ? ` @ ${money(x.price)}` : '';
    return `‚Ä¢ ${x.qty} √ó ${x.name} (${x.code})${unit}`;
  });
  const sub = arr.reduce((s,x)=> s + x.qty * Number(x.price||0), 0);
  if(showP){
    const vat = ex ? 0 : sub*0.2;
    const tot = ex ? sub : sub + vat;
    lines.push(`Subtotal: ${money(sub)}`);
    if(!ex) lines.push(`VAT (20%): ${money(vat)}`);
    lines.push(`Total: ${money(tot)}`);
  }
  return lines.join('\n');
}

/* ============================== Boot & wiring ============================== */
async function boot(){
  // Restore a saved session (non-fatal)
  try{ const saved = lc.load(); if(saved && Object.keys(saved).length) state = Object.assign(state, saved); }catch{}

  await loadOptions();
  await loadPricebook();

  // left search/clear
  $('#sectionSearch').addEventListener('input', drawSections);
  $('#clearSel').addEventListener('click', ()=>{
    if(!state.active) return;
    state.selection[state.active] = new Set();
    state.freepad[state.active] = '';
    $('#freepad').value='';
    drawChips(); drawCards(); drawSections(); refreshCopyTabs();
  });

  // center actions
  $('#btnSelectAll').addEventListener('click', ()=>{
    const items = state.bySection[state.active]||[];
    state.selection[state.active] = new Set(items.map(x=>x.code));
    drawChips(); drawCards(); drawSections(); refreshCopyTabs();
  });
  $('#btnClear').addEventListener('click', ()=>{
    state.selection[state.active] = new Set();
    drawChips(); drawCards(); drawSections(); refreshCopyTabs();
  });
  $('#freepad').addEventListener('input', e=>{
    state.freepad[state.active] = e.target.value;
    refreshCopyTabs();
  });

  // quick copy of current active (center)
  $('#btnCopySection').addEventListener('click', ()=>{
    const txt = formatForDepotSectionKey(state.active);
    navigator.clipboard.writeText(txt);
  });

  // right: copy tabs & toggles
  $('#copyTab').addEventListener('change', refreshCopyTabs);
  ['includeHeaders','useSemicolons','arrowPrefix'].forEach(id=>{
    document.getElementById(id).addEventListener('change', refreshCopyTabs);
  });
  $('#btnCopyTab').addEventListener('click', ()=>{
    navigator.clipboard.writeText($('#copyBox').value);
  });
  $('#btnAppendToFinal').addEventListener('click', ()=>{
    const sec = $('#copyTab').value;
    const chunk = formatForDepotSectionKey(sec);
    const cur = $('#finalbox').value.trim();
    $('#finalbox').value = (cur?cur+'\n':'') + chunk;
  });
  $('#btnCopyFinal').addEventListener('click', ()=>{ navigator.clipboard.writeText($('#finalbox').value); });
  $('#btnClearFinal').addEventListener('click', ()=>{ $('#finalbox').value=''; });

  // gear open/close
  $('#openGear').addEventListener('click', ()=>{ $('#gear').style.display='block'; });
  $('#closeGear').addEventListener('click', ()=>{ $('#gear').style.display='none'; });

  // pricebook controls
  $('#pbSearch').addEventListener('input', e=>{ pbFilter.q = e.target.value; drawPBTable(); });
  $('#pbCat').addEventListener('change', e=>{ pbFilter.cat = e.target.value; drawPBTable(); });
  $('#pbReload').addEventListener('click', loadPricebook);
  $('#pbApply').addEventListener('click', ()=>{
    try{
      const arr = JSON.parse($('#pbJson').value||'[]');
      if(Array.isArray(arr)){
        state.pricebook = arr.map(x=>({code:String(x.code||''),name:String(x.name||''),category:String(x.category||'Misc'),price:Number(x.price||0)}));
        lc.savePB(state.pricebook); drawPBControls();
      } else alert('JSON must be an array');
    }catch(e){ alert('Invalid JSON'); }
  });
  $('#showPrices').addEventListener('change', drawCart);
  $('#exVAT').addEventListener('change', drawCart);
  $('#cartToClipboard').addEventListener('click', ()=>{ navigator.clipboard.writeText(cartAsLines()); });
  $('#cartAsJSON').addEventListener('click', ()=>{
    const arr = Object.values(state.cart).filter(x=>x.qty>0).map(({code,name,category,price,qty})=>({code,name,category,price,qty}));
    navigator.clipboard.writeText(JSON.stringify(arr,null,2));
  });
  $('#cartToNotes').addEventListener('click', ()=>{
    const s = cartAsLines();
    const cur = $('#finalbox').value.trim();
    const chunk = `Components: ${s.replace(/\n/g,'; ')}`;
    $('#finalbox').value = (cur?cur+'\n':'') + chunk;

    // also expose a ‚Äúcomponents‚Äù section for per-section copying
    const key = 'components';
    if(!state.bySection[key]) state.bySection[key]=[];
    if(!state.sections.includes(key)) state.sections.push(key);
    if(!state.selection[key]) state.selection[key]=new Set();
    // overwrite a special leaf snapshot
    const snapCode = 'CMP-LIST';
    const text = s.split('\n').map(x=>'‚úÖ '+x).join(' ');
    const idx = state.bySection[key].findIndex(x=>x.code===snapCode);
    const leaf = {code:snapCode, section:key, text:"Components list added to Final Summary"};
    if(idx>=0) state.bySection[key][idx] = leaf; else state.bySection[key].unshift(leaf);
    state.selection[key].add(snapCode);
    drawSections(); refreshCopyTabs();
  });

  // session management
  $('#saveState').addEventListener('click', ()=>{ lc.save(); alert('Session saved to localStorage.'); });
  $('#loadState').addEventListener('click', ()=>{
    const s = lc.load(); if(s && Object.keys(s).length){ state = Object.assign(state, s); parseOptions(state.optionsText); drawPBControls(); $('#finalbox').value = s.finalText||''; alert('Loaded saved session.'); }
    else alert('No saved session found.');
  });
  $('#resetState').addEventListener('click', ()=>{
    if(confirm('Reset session (clears selections & cart)?')){
      state.selection={}; state.freepad={}; state.cart={}; $('#finalbox').value='';
      drawCards(); drawChips(); drawSections(); drawCart(); $('#selCount').textContent = 0; refreshCopyTabs();
    }
  });

  // keyboard goodies
  document.addEventListener('keydown', e=>{
    if((e.metaKey||e.ctrlKey) && e.key==='Enter'){ e.preventDefault(); navigator.clipboard.writeText(formatForDepotSectionKey(state.active)); }
    if(e.key==='Escape' && $('#gear').style.display==='block'){ $('#gear').style.display='none'; }
  });

  // counters
  $('#selCount').textContent = totalSelected();
}
boot();
</script>
</body>
</html>